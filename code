<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Find Me – A Valentine’s Puzzle Quest</title>
  <style>
    /* Reset & base */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { 
      background-color: #F3F0E8; 
      font-family: 'Arial', sans-serif; /* change this to your custom font if desired */
      color: #971522; 
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      text-align: center;
    }
    /* Section headings can later be styled by editing these rules */
    h2 { color: #971522; margin-bottom: 10px; }
    p { margin-bottom: 20px; }

    /* --- Love Letter Introduction --- */
    #love-letter {
      display: none;
      position: fixed;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      width: 90%;
      max-width: 600px;
      background: white;
      border: 5px solid #713E31;
      padding: 20px;
      z-index: 1000;
    }
    #love-letter .heart {
      font-size: 50px;
      color: #E7BE9A;
      margin-bottom: 10px;
    }
    #love-letter button {
      background: gold;
      color: #713E31;
      border: none;
      padding: 10px 20px;
      font-size: 18px;
      cursor: pointer;
    }

    /* --- Jigsaw Puzzle (8x8) --- */
    #jigsaw {
      display: none;
      position: relative;
      margin: 20px auto;
      width: 80vw;
      max-width: 600px;
      height: 80vw;
      max-height: 600px;
      border: 5px solid #713E31;
    }
    .jigsaw-piece {
      position: absolute;
      border: 1px solid gold;
      cursor: pointer;
      /* (You can later add a drop shadow or animation here) */
      transition: transform 0.3s;
    }

    /* --- Memory Matching Game --- */
    #memory-game {
      display: none;
      margin: 20px auto;
      width: 90vw;
      max-width: 800px;
    }
    #memory-game .grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      grid-gap: 10px;
    }
    #memory-game .card {
      background-color: white;
      border: 2px solid #713E31;
      height: 100px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      cursor: pointer;
      transition: transform 0.3s;
      user-select: none;
    }
    #memory-game .card.flipped {
      transform: rotateY(180deg);
    }
    /* A simple progress bar on top of memory game */
    .progress-bar {
      margin: 10px 0;
      background: #971522;
      height: 20px;
      width: 100%;
      border: 2px solid gold;
    }
    .progress-bar-fill {
      background: #E7BE9A;
      height: 100%;
      width: 0%;
      transition: width 0.5s;
    }

    /* --- Heart Graph Plotting --- */
    #heart-graph {
      display: none;
      margin: 20px auto;
      text-align: center;
    }
    #heart-graph canvas {
      background: white;
      border: 5px solid #713E31;
    }

    /* --- Interactive Polaroid Camera --- */
    #polaroid {
      display: none;
      margin: 20px auto;
      text-align: center;
    }
    #polaroid .polaroid-container {
      display: inline-block;
      margin: 10px;
      position: relative;
    }
    #polaroid .polaroid-container img {
      width: 150px;
      border: 10px solid white;
      box-shadow: 0 4px 8px rgba(0,0,0,0.3);
      cursor: pointer;
      transition: transform 0.3s;
    }
    #polaroid .polaroid-container img.zoomed {
      transform: scale(1.2);
    }

    /* --- Soft Toy Clues --- */
    #soft-toys {
      display: none;
      margin: 20px auto;
      text-align: center;
    }
    #soft-toys .toy {
      display: inline-block;
      margin: 10px;
      cursor: pointer;
    }
    #soft-toys .toy img {
      width: 100px;
      border: 3px solid gold;
    }

    /* --- Record/CD of Memories --- */
    #record {
      display: none;
      margin: 20px auto;
      text-align: center;
    }
    #record img {
      width: 150px;
      cursor: pointer;
      border: 3px solid #713E31;
    }

    /* --- Final Reward Video --- */
    #final-video {
      display: none;
      margin: 20px auto;
      text-align: center;
    }
    #final-video video {
      width: 90%;
      max-width: 800px;
    }
    .final-messages {
      margin-bottom: 10px;
      font-size: 2em;
      color: #971522;
    }

    /* --- Navigation Button --- */
    .next-btn {
      background: gold;
      color: #713E31;
      border: none;
      padding: 10px 20px;
      font-size: 18px;
      cursor: pointer;
      margin: 20px auto;
      display: block;
    }
  </style>
</head>
<body>
  <div class="container">
    <!-- Love Letter Introduction -->
    <div id="love-letter">
      <div class="heart">&#10084;</div>
      <h2>My Love, I am missing...</h2>
      <p>Follow the clues to find me, <span id="his-name">[Boyfriend's Name]</span>!</p>
      <button id="start-btn">Begin Puzzle</button>
    </div>

    <!-- Jigsaw Puzzle (8x8) -->
    <div id="jigsaw"></div>

    <!-- Memory Matching Game -->
    <div id="memory-game">
      <div class="progress-bar">
        <div class="progress-bar-fill"></div>
      </div>
      <div class="grid"></div>
    </div>

    <!-- Heart Graph Plotting Puzzle -->
    <div id="heart-graph">
      <canvas id="heartCanvas" width="400" height="400"></canvas>
      <p>Plot the heart by clicking on the canvas!</p>
    </div>

    <!-- Interactive Polaroid Camera -->
    <div id="polaroid">
      <div class="polaroid-container">
        <img src="polaroid1.jpg" alt="Polaroid 1">
      </div>
      <div class="polaroid-container">
        <img src="polaroid2.jpg" alt="Polaroid 2">
      </div>
      <!-- Add more if needed -->
    </div>

    <!-- Soft Toy Clues -->
    <div id="soft-toys">
      <div class="toy" data-hint="Check under your pillow">
        <img src="softtoy1.jpg" alt="Soft Toy 1">
      </div>
      <div class="toy" data-hint="Look beside the bookshelf">
        <img src="softtoy2.jpg" alt="Soft Toy 2">
      </div>
      <!-- More soft toys as desired -->
    </div>

    <!-- Record/CD of Memories -->
    <div id="record">
      <img src="record.jpg" alt="Record of Memories">
    </div>

    <!-- Final Reward Video -->
    <div id="final-video">
      <div class="final-messages">
        <p>You found me!</p>
        <p>Happy Valentine’s Day, my love!</p>
      </div>
      <video controls>
        <source src="final-video.mp4" type="video/mp4">
        Your browser does not support HTML video.
      </video>
    </div>

    <!-- Next Button to advance the puzzles -->
    <button class="next-btn" id="next-btn">Next</button>
  </div>

  <script>
    /* ===== Global Variables & Customization ===== */
    let currentPuzzle = 0; // 0: Love letter, 1: Jigsaw, 2: Memory, 3: Heart Graph, 4: Polaroid, 5: Soft Toys, 6: Record, 7: Final Video
    const totalPuzzles = 8;
    // Customize names (edit these)
    let myName = "Your Name";
    let hisName = "Boyfriend's Name";
    document.getElementById("his-name").textContent = hisName;

    // Music files (ensure these files are available or change paths)
    const musicPlaylist = {
      loveLetter: new Audio('LoveStory_TaylorSwift.mp3'),
      jigsaw: new Audio('Photograph_EdSheeran.mp3'),
      memory: new Audio('CountOnMe_BrunoMars.mp3'),
      heartGraph: new Audio('ThinkingOutLoud_EdSheeran.mp3'),
      polaroid: new Audio('TeenageDream_KatyPerry.mp3'),
      softToys: new Audio('ShakeItOff_TaylorSwift.mp3'),
      record: new Audio('Perfect_EdSheeran.mp3'),
      finalVideo: new Audio('MarryYou_BrunoMars.mp3')
    };

    /* ===== Puzzle Flow Control ===== */
    window.onload = function() {
      showPuzzle(0);
    };

    // Function to show a given puzzle section
    function showPuzzle(index) {
      // Hide all sections
      const sections = ["love-letter", "jigsaw", "memory-game", "heart-graph", "polaroid", "soft-toys", "record", "final-video"];
      sections.forEach(id => document.getElementById(id).style.display = "none");

      // Stop any playing music
      Object.values(musicPlaylist).forEach(audio => { audio.pause(); audio.currentTime = 0; });

      // Display the current puzzle and start its music/activity
      switch(index) {
        case 0: // Love Letter
          document.getElementById("love-letter").style.display = "block";
          musicPlaylist.loveLetter.play();
          break;
        case 1: // Jigsaw Puzzle
          document.getElementById("jigsaw").style.display = "block";
          initJigsaw();
          musicPlaylist.jigsaw.play();
          break;
        case 2: // Memory Matching Game
          document.getElementById("memory-game").style.display = "block";
          initMemoryGame();
          musicPlaylist.memory.play();
          break;
        case 3: // Heart Graph Plotting
          document.getElementById("heart-graph").style.display = "block";
          initHeartGraph();
          musicPlaylist.heartGraph.play();
          break;
        case 4: // Interactive Polaroid
          document.getElementById("polaroid").style.display = "block";
          initPolaroid();
          musicPlaylist.polaroid.play();
          break;
        case 5: // Soft Toy Clues
          document.getElementById("soft-toys").style.display = "block";
          document.querySelectorAll("#soft-toys .toy").forEach(toy => {
            toy.onclick = function() {
              alert(this.dataset.hint);
            };
          });
          musicPlaylist.softToys.play();
          break;
        case 6: // Record/CD of Memories
          document.getElementById("record").style.display = "block";
          document.getElementById("record").onclick = function() {
            alert("Remember our favorite memory, " + hisName + "!");
          };
          musicPlaylist.record.play();
          break;
        case 7: // Final Reward Video
          document.getElementById("final-video").style.display = "block";
          musicPlaylist.finalVideo.play();
          break;
        default:
          console.log("Puzzle chain complete.");
      }
      currentPuzzle = index;
    }

    // Next button to advance puzzles manually
    document.getElementById("next-btn").addEventListener("click", function() {
      if (currentPuzzle < totalPuzzles - 1) {
        currentPuzzle++;
        showPuzzle(currentPuzzle);
      } else {
        alert("You have completed all puzzles!");
      }
    });

    // Begin button on the love letter
    document.getElementById("start-btn").addEventListener("click", function() {
      showPuzzle(1);
    });

    /* ===== Jigsaw Puzzle Code (8x8) ===== */
    function initJigsaw() {
      const container = document.getElementById("jigsaw");
      container.innerHTML = "";
      const imgSrc = "jigsaw_photo.jpg"; // change to your jigsaw photo
      const gridSize = 8;
      const containerSize = container.offsetWidth;
      const pieceSize = containerSize / gridSize;
      let pieces = [];
      // Create 64 pieces with correct background positioning
      for (let row = 0; row < gridSize; row++) {
        for (let col = 0; col < gridSize; col++) {
          let piece = document.createElement("div");
          piece.className = "jigsaw-piece";
          piece.style.width = pieceSize + "px";
          piece.style.height = pieceSize + "px";
          piece.style.backgroundImage = "url('" + imgSrc + "')";
          piece.style.backgroundPosition = `-${col * pieceSize}px -${row * pieceSize}px`;
          // Store original (correct) positions
          piece.dataset.origLeft = col * pieceSize;
          piece.dataset.origTop = row * pieceSize;
          // Place pieces in a grid (for starting, we can shuffle them)
          pieces.push(piece);
          container.appendChild(piece);
        }
      }
      // Randomize positions
      pieces.forEach(piece => {
        piece.style.left = Math.random() * (containerSize - pieceSize) + "px";
        piece.style.top = Math.random() * (containerSize - pieceSize) + "px";
        piece.draggable = true;
        piece.addEventListener("dragstart", jigsawDragStart);
        piece.addEventListener("dragover", jigsawDragOver);
        piece.addEventListener("drop", jigsawDrop);
      });
    }
    let jigsawDragged = null;
    function jigsawDragStart(e) {
      jigsawDragged = this;
    }
    function jigsawDragOver(e) {
      e.preventDefault();
    }
    function jigsawDrop(e) {
      e.preventDefault();
      // Swap positions of dragged and dropped pieces
      let tempLeft = this.style.left;
      let tempTop = this.style.top;
      this.style.left = jigsawDragged.style.left;
      this.style.top = jigsawDragged.style.top;
      jigsawDragged.style.left = tempLeft;
      jigsawDragged.style.top = tempTop;
      // (For a full puzzle, you’d add a check to see if all pieces are in place)
      // For demo, after 5 seconds assume puzzle solved:
      setTimeout(() => { showPuzzle(2); }, 5000);
    }

    /* ===== Memory Matching Game Code ===== */
    function initMemoryGame() {
      const grid = document.querySelector("#memory-game .grid");
      grid.innerHTML = "";
      const symbols = ['🍎','🍌','🍇','🍓','🍒','🍍','🥝','🍑']; // 8 symbols
      let cardsArray = symbols.concat(symbols);
      // Shuffle array
      cardsArray.sort(() => 0.5 - Math.random());
      cardsArray.forEach(symbol => {
        let card = document.createElement("div");
        card.className = "card";
        card.dataset.symbol = symbol;
        card.innerHTML = "<span>" + symbol + "</span>";
        card.addEventListener("click", memoryCardClick);
        grid.appendChild(card);
      });
      // Reset progress bar (0%)
      updateProgressBar(0);
      memoryState.first = null;
      memoryState.second = null;
      memoryState.lock = false;
      memoryState.matches = 0;
    }
    let memoryState = { first: null, second: null, lock: false, matches: 0 };
    function memoryCardClick() {
      if (memoryState.lock) return;
      if (this === memoryState.first) return;
      this.classList.add("flipped");
      if (!memoryState.first) {
        memoryState.first = this;
        return;
      }
      memoryState.second = this;
      memoryState.lock = true;
      if (memoryState.first.dataset.symbol === memoryState.second.dataset.symbol) {
        memoryState.matches++;
        resetMemory();
        // Update progress bar based on matches (8 pairs total)
        updateProgressBar((memoryState.matches / 8) * 100);
        if (memoryState.matches === 8) {
          setTimeout(() => { showPuzzle(3); }, 1000);
        }
      } else {
        setTimeout(() => {
          memoryState.first.classList.remove("flipped");
          memoryState.second.classList.remove("flipped");
          resetMemory();
        }, 1000);
      }
    }
    function resetMemory() {
      memoryState.first = null;
      memoryState.second = null;
      memoryState.lock = false;
    }
    function updateProgressBar(value) {
      document.querySelector(".progress-bar-fill").style.width = value + "%";
    }

    /* ===== Heart Graph Plotting ===== */
    function initHeartGraph() {
      const canvas = document.getElementById("heartCanvas");
      const ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      let points = [];
      canvas.onclick = function(e) {
        let rect = canvas.getBoundingClientRect();
        let x = e.clientX - rect.left;
        let y = e.clientY - rect.top;
        points.push({ x, y });
        drawPoints(ctx, points);
        // For demo, once 20 points are placed, move on
        if (points.length >= 20) {
          setTimeout(() => { showPuzzle(4); }, 500);
        }
      };
    }
    function drawPoints(ctx, points) {
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      ctx.fillStyle = "#971522";
      points.forEach(p => {
        ctx.beginPath();
        ctx.arc(p.x, p.y, 5, 0, Math.PI * 2);
        ctx.fill();
      });
    }

    /* ===== Polaroid Interaction ===== */
    function initPolaroid() {
      document.querySelectorAll("#polaroid .polaroid-container img").forEach(img => {
        img.onclick = function() {
          this.classList.toggle("zoomed");
        };
      });
      // After 3 seconds, auto-advance (or rely on Next button)
      setTimeout(() => { showPuzzle(5); }, 3000);
    }

    /* ===== Next button additional handling ===== */
    // (For soft toys and record, Next button already advances via the global listener)

    // You can add any extra interactive logic as desired.
  </script>
</body>
</html>
